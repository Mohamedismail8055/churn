# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12g5vTVxCcnlaHpXO8_HeYmX9fKJFjqoe
"""

import streamlit as st
import pandas as pd
import pickle
import numpy as np

# Load the trained model
with open("model.pkl", "rb") as model_file:
    model = pickle.load(model_file)

# Function for prediction
def predict_churn(input_data):
    df = pd.DataFrame([input_data])
    prediction = model.predict(df)[0]
    probability = model.predict_proba(df)[0][1]
    return prediction, probability

# Streamlit UI
st.title("Telecom Churn Prediction App")
st.write("Enter customer details to predict churn probability.")

# User input fields (Top 10 Features Only)
day_mins = st.slider("Day Minutes", min_value=0.0, max_value=300.0, step=0.1, value=150.0)
customer_calls = st.slider("Customer Calls", min_value=0, max_value=20, step=1, value=5)
eve_mins = st.slider("Evening Minutes", min_value=0.0, max_value=300.0, step=0.1, value=150.0)
voice_plan = st.radio("Voice Plan", options=[0, 1], index=0)
night_mins = st.slider("Night Minutes", min_value=0.0, max_value=300.0, step=0.1, value=150.0)
account_length = st.slider("Account Length", min_value=1, max_value=243, step=1, value=100)
intl_mins = st.slider("International Minutes", min_value=0.0, max_value=20.0, step=0.1, value=10.0)
night_calls = st.slider("Night Calls", min_value=0, max_value=160, step=1, value=75)
day_calls = st.slider("Day Calls", min_value=0, max_value=160, step=1, value=75)
eve_calls = st.slider("Evening Calls", min_value=0, max_value=160, step=1, value=75)

# Store inputs in dictionary
input_data = {
    'day.mins': day_mins,
    'customer.calls': customer_calls,
    'eve.mins': eve_mins,
    'voice.plan': voice_plan,
    'night.mins': night_mins,
    'account.length': account_length,
    'intl.mins': intl_mins,
    'night.calls': night_calls,
    'day.calls': day_calls,
    'eve.calls': eve_calls
}

if st.button("Predict Churn"):
    prediction, probability = predict_churn(input_data)
    if prediction == 1:
        st.error(f"This customer is likely to churn. (Probability: {probability:.2f})")
    else:
        st.success(f"This customer is unlikely to churn. (Probability: {probability:.2f})")
